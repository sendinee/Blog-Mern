{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport { userActionTypes } from \"../constants/usersAction.types\";\nimport { login, endpoint } from \"../../endpoints\";\n\nconst usersActionsCreator = (actionType, payload = {}) => {\n  switch (actionType) {\n    case userActionTypes.LOGIN_SUCCESS:\n      return async dispatch => {\n        let response = await fetch(login, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: payload.formObject\n        });\n        let data = await response.json();\n\n        if (data.status.status === \"unsuccessful\") {\n          dispatch({\n            type: userActionTypes.LOGIN_FAILURE,\n            payload: {\n              isLoggedIn: false,\n              loginError: data.status.message\n            }\n          });\n          console.log(\"error in login\");\n          return;\n        }\n\n        Cookies.set(\"jwt\", data.data[0][\"jwt\"]);\n        Cookies.set(\"isLoggedIn\", \"true\");\n        dispatch({\n          type: userActionTypes.LOGIN_SUCCESS,\n          payload: {\n            isLoggedIn: true\n          }\n        });\n      };\n\n    case userActionTypes.AUTHORIZED:\n      return async dispatch => {\n        let myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + Cookies.get(\"jwt\"));\n        let response;\n        response = await fetch(endpoint, {\n          headers: myHeaders,\n          mode: \"cors\"\n        });\n\n        if (response.ok) {\n          let {\n            blogs\n          } = await response.json();\n          dispatch({\n            type: userActionTypes.LOGIN_SUCCESS,\n            payload: {\n              isLoggedIn: true\n            }\n          });\n          dispatch({\n            type: userActionTypes.LOAD_BLOGS,\n            payload: {\n              blogs: [...blogs]\n            }\n          });\n        } else {\n          Cookies.remove(\"jwt\"); // Cookies.set(\"isLoggedIn\", \"false\");\n\n          dispatch({\n            type: userActionTypes.LOGIN_FAILURE,\n            payload: {\n              isLoggedIn: false,\n              loginError: \"\"\n            }\n          });\n        }\n      };\n\n    case userActionTypes.LOGOUT:\n      Cookies.remove(\"jwt\");\n      Cookies.set(\"isLoggedIn\", \"false\");\n      return {\n        type: userActionTypes.LOGOUT,\n        payload: {\n          isLoggedIn: false\n        }\n      };\n\n    default:\n      return {\n        type: \"Invalid Action\"\n      };\n  }\n};\n\nexport default usersActionsCreator;","map":{"version":3,"sources":["C:/Users/zoema/blog/front-react/src/store/actions/usersActions.creator.js"],"names":["Cookies","userActionTypes","login","endpoint","usersActionsCreator","actionType","payload","LOGIN_SUCCESS","dispatch","response","fetch","method","headers","body","formObject","data","json","status","type","LOGIN_FAILURE","isLoggedIn","loginError","message","console","log","set","AUTHORIZED","myHeaders","Headers","append","get","mode","ok","blogs","LOAD_BLOGS","remove","LOGOUT"],"mappings":"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","sourcesContent":["import Cookies from \"js-cookie\";\n\nimport { userActionTypes } from \"../constants/usersAction.types\";\nimport { login, endpoint } from \"../../endpoints\";\n\nconst usersActionsCreator = (actionType, payload = {}) => {\n  switch (actionType) {\n    case userActionTypes.LOGIN_SUCCESS:\n      return async (dispatch) => {\n        let response = await fetch(login, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: payload.formObject,\n        });\n\n        let data = await response.json();\n\n        if (data.status.status === \"unsuccessful\") {\n          dispatch({\n            type: userActionTypes.LOGIN_FAILURE,\n            payload: { isLoggedIn: false, loginError: data.status.message },\n          });\n          console.log(\"error in login\");\n          return;\n        }\n\n        Cookies.set(\"jwt\", data.data[0][\"jwt\"]);\n        Cookies.set(\"isLoggedIn\", \"true\");\n        dispatch({\n          type: userActionTypes.LOGIN_SUCCESS,\n          payload: { isLoggedIn: true },\n        });\n      };\n\n    case userActionTypes.AUTHORIZED:\n      return async (dispatch) => {\n        let myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + Cookies.get(\"jwt\"));\n        let response;\n        response = await fetch(endpoint, {\n          headers: myHeaders,\n          mode: \"cors\",\n        });\n\n        if (response.ok) {\n          let { blogs } = await response.json();\n\n          dispatch({\n            type: userActionTypes.LOGIN_SUCCESS,\n            payload: { isLoggedIn: true },\n          });\n          dispatch({\n            type: userActionTypes.LOAD_BLOGS,\n            payload: { blogs: [...blogs] },\n          });\n        } else {\n          Cookies.remove(\"jwt\");\n          // Cookies.set(\"isLoggedIn\", \"false\");\n          dispatch({\n            type: userActionTypes.LOGIN_FAILURE,\n            payload: { isLoggedIn: false, loginError: \"\" },\n          });\n        }\n      };\n\n    case userActionTypes.LOGOUT:\n      Cookies.remove(\"jwt\");\n      Cookies.set(\"isLoggedIn\", \"false\");\n      return { type: userActionTypes.LOGOUT, payload: { isLoggedIn: false } };\n\n    default:\n      return {\n        type: \"Invalid Action\",\n      };\n  }\n};\n\nexport default usersActionsCreator;\n"]},"metadata":{},"sourceType":"module"}